import { ICanBeReadonly, ICanFocus, IDisableable, IEditable, IHasCX, IHasDirection, IHasForwardedRef, IHasRawProps } from '@epam/uui-core';
import { RadioInputProps } from '../inputs';
import * as React from 'react';
export interface RadioGroupItem<TValue> extends IDisableable, Omit<RadioInputProps, 'id' | 'onValueChange' | 'value' | 'name'> {
    /** RadioInput label. Can be a string, or React.ReactNode */
    name?: React.ReactNode;
    /** Render callback for checkbox label
     * If omitted, 'name' prop value will be rendered
     */
    renderName?: () => React.ReactNode;
    /** Item ID to put into selection */
    id: TValue;
}
export interface RadioGroupProps<TValue> extends IHasCX, IEditable<TValue>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement>, ICanFocus<HTMLFieldSetElement> {
    /** Array of checkbox items to be rendered in group */
    items: RadioGroupItem<TValue>[];
    /** Defines group components size */
    size?: RadioInputProps['size'];
    /** Defines native HTML name attribute for each group member */
    name?: string;
}
export declare function RadioGroup<TValue>(props: RadioGroupProps<TValue>): JSX.Element;
//# sourceMappingURL=RadioGroup.d.ts.map