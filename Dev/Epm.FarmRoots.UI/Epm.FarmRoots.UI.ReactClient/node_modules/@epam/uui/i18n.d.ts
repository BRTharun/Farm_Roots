export declare const i18n: {
    dataPickerBody: {
        searchPlaceholder: string;
        noRecordsMessage: string;
        noRecordsSubTitle: string;
    };
    pickerModal: {
        headerTitle: string;
        searchPlaceholder: string;
        cancelButton: string;
        selectButton: string;
        clearAllButton: string;
        selectAllButton: string;
    };
    pickerInput: {
        showOnlySelectedLabel: string;
        clearSelectionButton: string;
        clearSelectionButtonSingle: string;
        selectAllButton: string;
        doneButton: string;
    };
    notificationCard: {
        closeAllNotificationsButton: string;
    };
    form: {
        notifications: {
            actionButtonCaption: string;
            unsavedChangesMessage: string;
        };
        modals: {
            beforeLeaveMessage: string;
            discardButton: string;
            saveButton: string;
        };
    };
    rangeDatePicker: {
        pickerPlaceholderFrom: string;
        pickerPlaceholderTo: string;
    };
    tables: {
        noResultsBlock: {
            title: string;
            message: string;
        };
        columnsConfigurationModal: {
            applyButton: string;
            cancelButton: string;
            selectAllButton: string;
            clearAllButton: string;
            checkAllButton: string;
            uncheckAllButton: string;
            configureColumnsTitle: string;
            pinnedToTheLeftSubgroupTitle: string;
            pinnedToTheRightSubgroupTitle: string;
            notPinnedSubgroupTitle: string;
            resetToDefaultButton: string;
            displayedSectionTitle: string;
            hiddenSectionTitle: string;
            searchPlaceholder: string;
            noResultsFound: {
                text: string;
                subText: string;
            };
            enableAtLeastOneColumnMessage: string;
            pinColumnToTheLeftButton: string;
            pinColumnToTheRightButton: string;
            unPinColumnButton: string;
            lockedColumnPinButton: string;
        };
        columnHeader: {
            collapseAllTooltip: string;
            expandAllTooltip: string;
        };
    };
    pickerFilterHeader: {
        sortAscending: string;
        sortDescending: string;
    };
    filterToolbar: {
        addCaption: string;
        datePicker: {
            placeholder: string;
            removeCaption: string;
            clearCaption: string;
        };
        rangeDatePicker: {
            emptyPickerPlaceholder: string;
            emptyPlaceholderFrom: string;
            emptyPlaceholderTo: string;
        };
        pickerInput: {
            itemsPlaceholder: string;
        };
    };
    presetPanel: {
        addCaption: string;
    };
    confirmationModal: {
        discardButton: string;
        saveButton: string;
    };
    fileUpload: {
        labelStart: string;
        browse: string;
        labelEnd: string;
    };
    fileCard: {
        fileSizeProgress: string;
        failedUploadErrorMessage: string;
    };
    errorHandler: {
        errorPageConfig: {
            notFound: {
                title: string;
                subtitle: string;
            };
            permissionDenied: {
                title: string;
                subtitle: string;
            };
            serverError: {
                title: string;
                subtitle: string;
            };
            serviceUnavailable: {
                title: string;
                subtitle: string;
            };
            default: {
                title: string;
                subtitle: string;
            };
        };
        recoveryMessageConfig: {
            'auth-lost': {
                title: string;
                subtitle: string;
            };
            'connection-lost': {
                title: string;
                subtitle: string;
            };
            maintenance: {
                title: string;
                subtitle: string;
            };
            'server-overload': {
                title: string;
                subtitle: string;
            };
        };
    };
    lenses: {
        validation: {
            isRequiredMessage: string;
            lessThanMinimumValueMessage: (minValue: number) => string;
            greaterThanMaximumValueMessage: (maxValue: number) => string;
            greaterThanMaximumLengthMessage: (maxLength: number) => string;
        };
    };
    locale: string;
};
//# sourceMappingURL=i18n.d.ts.map