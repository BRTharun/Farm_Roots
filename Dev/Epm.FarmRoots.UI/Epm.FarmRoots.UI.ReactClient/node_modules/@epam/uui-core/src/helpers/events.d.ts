import * as React from 'react';
export declare function isEventTargetInsideClickable(e: React.SyntheticEvent<Element>): boolean;
/**
 * This method receives blur event. So, relatedTarget is the element receiving focus.
 * @param e - blur event
 */
export declare function isFocusReceiverInsideFocusLock(e: React.FocusEvent<HTMLElement>): boolean;
export declare function isEventTargetInsideDraggable(e: React.PointerEvent, toElement: Node): boolean;
export declare function isEventTargetInsideInput(e: Event | React.PointerEvent, toElement: Node): boolean;
export declare function releasePointerCaptureOnEventTarget(e: React.PointerEvent): void;
/**
 * Iterates parent elements starting from "fromElement" and goes through its parents until "toElement" is found.
 * It returns true if any element along this path contains one of the class names specified in the "classNames" array.
 *
 * @param fromElement
 * @param toElement
 * @param classNames
 */
export declare function isAnyParentHasClass(fromElement: EventTarget, toElement: Node, classNames: string[]): boolean;
export declare function blurFocusedElement(): void;
export declare function preventDefaultIfTargetFocused(e: Event): void;
/**
 * Works exactly like native "closest" method, with next enhancements:
 * - supports HTMLElement as a selector
 * - takes Event as an input and performs search for the "event target" or "event related target" for focus/blur events.
 *
 * @param event
 * @param condition
 */
export declare function closestTargetParentByCondition(e: Event, condition: string | HTMLElement): HTMLElement;
export declare function getScrollParentOfEventTarget(event: Event, dimension: 'x' | 'y'): HTMLElement;
//# sourceMappingURL=events.d.ts.map