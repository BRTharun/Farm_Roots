import { BaseContext } from './BaseContext';
import { LayoutContext } from './LayoutContext';
import * as React from 'react';
import { IModalContext } from '../types/contexts';
import { IModal } from '../types/props';
export interface ModalOperation {
    /** Modal component that should be rendered */
    component?: React.ComponentType<any>;
    /** Modal component props */
    props: IModal<any>;
}
export declare class ModalOperationCancelled {
}
export declare class ModalContext extends BaseContext implements IModalContext {
    private layoutCtx;
    private operations;
    constructor(layoutCtx: LayoutContext);
    destroyContext(): void;
    show<TResult, TParameters = {}>(render: (props: IModal<TResult, TParameters>) => React.ReactElement<any>, parameters?: TParameters): Promise<TResult>;
    closeAll(): void;
    private showModal;
    isModalOperationActive(): boolean;
    getOperations(): ModalOperation[];
}
//# sourceMappingURL=ModalContext.d.ts.map