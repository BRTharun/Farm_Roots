import { BaseContext } from './BaseContext';
import { Link } from '../types/objects';
import { IRouterContext } from '../types/contexts';
export declare class Lock {
    tryRelease?: () => Promise<void>;
    constructor(tryRelease?: () => Promise<void>);
}
export declare class LockContext extends BaseContext {
    private router;
    private currentLock;
    private unblock;
    constructor(router: IRouterContext);
    destroyContext(): void;
    acquire(tryRelease?: () => Promise<any>): Promise<Lock | null>;
    getCurrentLock(): Lock | null;
    tryRelease(): Promise<any>;
    withLock<T = any>(action: () => Promise<T>): Promise<T>;
    routerWillLeave(nextLocation: Link): void;
    private clearLock;
    release(lock: Lock): void;
}
//# sourceMappingURL=LockContext.d.ts.map