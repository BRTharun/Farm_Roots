import * as React from 'react';
import { IDndActor, DropPosition, AcceptDropParams, DndActorRenderParams, DropPositionOptions } from '../../types/dnd';
import { UuiContexts } from '../../types/contexts';
import { DndContextState } from './DndContext';
export interface DndActorProps<TSrcData, TDstData> extends IDndActor<TSrcData, TDstData> {
    /** Render callback for DragActor content */
    render(props: DndActorRenderParams): React.ReactNode;
}
interface DndActorState {
    pointerX: number;
    pointerY: number;
    isMouseDown: boolean;
    isDragging: boolean;
    isMouseOver: boolean;
    position?: DropPosition;
    dndContextState: DndContextState;
}
/**
 * This workaround is needed to make it tree-shakable, but it does not look good.
 * It's better to rewrite it to functional component instead.
 * The key point here is to get rid of any static props (like sectorPositionPriorities, contextType).
 */
export declare const DndActor: {
    new <TSrcData = any, TDstData = any>(props: DndActorProps<TSrcData, TDstData> | Readonly<DndActorProps<TSrcData, TDstData>>): {
        state: DndActorState;
        context: UuiContexts;
        dndRef: React.RefObject<HTMLElement>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        contextUpdateHandler: (dndContextState: DndContextState) => void;
        windowPointerUpHandler: () => void;
        windowPointerMoveHandler: (e: MouseEvent) => void;
        getDropParams(e: React.MouseEvent<HTMLElement>): AcceptDropParams<TSrcData, TDstData>;
        getPosition(params: AcceptDropParams<TSrcData, TDstData>, options: DropPositionOptions): DropPosition;
        render(): React.ReactNode;
        setState<K extends keyof DndActorState>(state: DndActorState | ((prevState: Readonly<DndActorState>, props: Readonly<DndActorProps<TSrcData, TDstData>>) => DndActorState | Pick<DndActorState, K>) | Pick<DndActorState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<DndActorProps<TSrcData, TDstData>>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<DndActorProps<TSrcData, TDstData>>, prevState: Readonly<DndActorState>): any;
        componentDidUpdate?(prevProps: Readonly<DndActorProps<TSrcData, TDstData>>, prevState: Readonly<DndActorState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): void;
    };
    new <TSrcData = any, TDstData = any>(props: DndActorProps<TSrcData, TDstData>, context: any): {
        state: DndActorState;
        context: UuiContexts;
        dndRef: React.RefObject<HTMLElement>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        contextUpdateHandler: (dndContextState: DndContextState) => void;
        windowPointerUpHandler: () => void;
        windowPointerMoveHandler: (e: MouseEvent) => void;
        getDropParams(e: React.MouseEvent<HTMLElement>): AcceptDropParams<TSrcData, TDstData>;
        getPosition(params: AcceptDropParams<TSrcData, TDstData>, options: DropPositionOptions): DropPosition;
        render(): React.ReactNode;
        setState<K extends keyof DndActorState>(state: DndActorState | ((prevState: Readonly<DndActorState>, props: Readonly<DndActorProps<TSrcData, TDstData>>) => DndActorState | Pick<DndActorState, K>) | Pick<DndActorState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<DndActorProps<TSrcData, TDstData>>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<DndActorProps<TSrcData, TDstData>>, prevState: Readonly<DndActorState>): any;
        componentDidUpdate?(prevProps: Readonly<DndActorProps<TSrcData, TDstData>>, prevState: Readonly<DndActorState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<DndActorProps<TSrcData, TDstData>>, nextState: Readonly<DndActorState>, nextContext: any): void;
    };
    contextType: React.Context<import("../../types/contexts").CommonContexts<any, any>>;
    sectorPositionPriorities: Record<string, DropPosition[]>;
};
export {};
//# sourceMappingURL=DndActor.d.ts.map