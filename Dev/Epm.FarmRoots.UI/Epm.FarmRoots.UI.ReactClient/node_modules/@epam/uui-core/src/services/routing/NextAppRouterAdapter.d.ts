import { IRouterContext, Link } from '../../types';
interface NavigateOptions {
    scroll?: boolean;
}
export type TNextAppRouter = {
    push(href: string, options?: NavigateOptions): void;
    replace(href: string, options?: NavigateOptions): void;
};
export type ReadonlySearchParams = URLSearchParams & {
    append(): void;
    delete(): void;
    set(): void;
    sort(): void;
};
export declare class NextAppRouterAdapter implements IRouterContext {
    private router;
    private isBlockRun;
    private pathaname?;
    private searchParams?;
    constructor(router: TNextAppRouter);
    updateURLParams(pathname: string, searchParams: ReadonlySearchParams): void;
    getCurrentLink(): Link;
    redirect(link: Link): void;
    transfer(link: Link): void;
    isActive(link: Link): boolean;
    createHref(link: Link): string;
    listen(listener: (link: Link) => void): () => void;
    block(listener: (link: Link) => void): () => void;
}
export {};
//# sourceMappingURL=NextAppRouterAdapter.d.ts.map