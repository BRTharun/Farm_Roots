import { DataColumnProps, DataTableState, IEditable, ITablePreset, ITableState, TableFiltersConfig } from '../../types';
interface UseTableStateHookBaseParams<TFilter = Record<string, any>, TViewState = any> {
    /** Columns configuration, can be omitted if used without tables */
    columns?: DataColumnProps[];
    /** Filters configuration, can be omitted if you don't need filters */
    filters?: TableFiltersConfig<TFilter>[];
    /** Initial presets array */
    initialPresets?: ITablePreset<TFilter, TViewState>[];
    /** Called when preset was created. Should return the ID of new preset */
    onPresetCreate?(preset: ITablePreset<TFilter, TViewState>): Promise<number>;
    /** Called when preset was updated */
    onPresetUpdate?(preset: ITablePreset<TFilter, TViewState>): Promise<void>;
    /** Called when preset was deleted */
    onPresetDelete?(preset: ITablePreset<TFilter, TViewState>): Promise<void>;
}
interface UseTableStateHookImplParams<TFilter = Record<string, any>, TViewState = any> extends UseTableStateHookBaseParams<TFilter, TViewState> {
    value: DataTableState<TFilter, TViewState>;
    onValueChange: (update: (val: DataTableState<TFilter, TViewState>) => DataTableState<TFilter, TViewState>) => void;
}
export declare const useTableStateImpl: <TFilter = Record<string, any>, TViewState = any>(params: UseTableStateHookImplParams<TFilter, TViewState>) => ITableState<TFilter, TViewState>;
export interface UseTableStateHookParams<TFilter = Record<string, any>, TViewState = any> extends UseTableStateHookBaseParams<TFilter, TViewState>, Partial<IEditable<DataTableState<TFilter, TViewState>>> {
}
export declare const useTableState: <TFilter = Record<string, any>, TViewState = any>(params: UseTableStateHookParams<TFilter, TViewState>) => ITableState<TFilter, TViewState>;
export {};
//# sourceMappingURL=useTableState.d.ts.map