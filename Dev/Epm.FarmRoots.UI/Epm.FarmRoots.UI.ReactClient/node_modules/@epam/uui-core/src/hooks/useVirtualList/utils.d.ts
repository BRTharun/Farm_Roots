import type { ScrollToConfig, VirtualListState } from '../../types';
import { RowsInfo, VirtualListInfo } from './types';
export declare const getUpdatedRowHeights: (virtualListInfo: VirtualListInfo) => number[];
export declare const getAverageRowHeight: (rowHeights: Array<number | undefined>) => number;
export declare const getUpdatedRowOffsets: ({ rowOffsets, rowsCount, listOffset, rowHeights, averageRowHeight }: VirtualListInfo) => number[];
export declare const getNewEstimatedContainerHeight: (rowOffsets: number[], rowsCount: number, listOffset: number) => number;
export declare const getUpdatedRowsInfo: (virtualListInfo: VirtualListInfo) => RowsInfo;
export declare const getRealTopIndex: ({ rowsCount, scrollContainer, rowOffsets }: VirtualListInfo) => number;
export declare const getRowsToFetchForScroll: (virtualListInfo: VirtualListInfo) => {
    visibleCount: number;
    topIndex: number;
};
export declare const getScrollToCoordinate: (info: VirtualListInfo, scrollTo: ScrollToConfig) => number;
export declare const getTopCoordinate: ({ rowOffsets, listOffset, value, rowHeights }: VirtualListInfo, scrollTo: ScrollToConfig) => number;
export declare const assumeHeightForScrollToIndex: (value: VirtualListState, estimatedHeight: number, averageRowHeight: number) => number;
export declare const getTopIndexWithOffset: (index: number, overdrawRows: number, blockSize: number) => number;
export declare const getOffsetYForIndex: (index: number | null | undefined, rowOffsets: number[], listOffset: number) => number;
//# sourceMappingURL=utils.d.ts.map