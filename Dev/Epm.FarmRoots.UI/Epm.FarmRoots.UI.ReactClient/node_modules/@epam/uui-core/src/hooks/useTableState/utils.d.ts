import { DataTableState, FiltersConfig, TableFiltersConfig } from '../../types/tables';
export declare const stateToQueryObject: (state: DataTableState, currentQuery: any) => any;
export declare const getValueFromUrl: (query: any) => {
    filter: any;
    columnsConfig: any;
    presetId: any;
    page: any;
    pageSize: any;
    sorting: any;
    viewState: any;
};
export declare const normalizeTableStateValue: <TFilter, TViewState>(newValue: DataTableState<TFilter, TViewState>, prevValue: DataTableState<TFilter, TViewState>, filters: TableFiltersConfig<TFilter>[]) => {
    filtersConfig: FiltersConfig<any>;
    filter: TFilter;
    viewState: TViewState;
    columnsConfig?: import("../../types/tables").ColumnsConfig;
    presetId?: number;
    search?: string;
    checked?: any[];
    folded?: Record<string, boolean>;
    sorting?: import("index").SortingOption<any>[];
    selectedId?: any;
    focusedIndex?: number;
    page?: number;
    pageSize?: number;
    foldAll?: boolean;
    scrollTo?: import("index").ScrollToConfig;
    topIndex?: number;
    visibleCount?: number;
};
export declare const normalizeFilterConfig: <TFilter>(filtersConfig: FiltersConfig, filterValue: Record<string, any> | undefined, filters: TableFiltersConfig<TFilter>[]) => FiltersConfig<any>;
//# sourceMappingURL=utils.d.ts.map