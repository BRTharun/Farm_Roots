import { TreeStructure } from '../TreeStructure';
import { LoadOptions, LoadAllOptions } from './types';
import { ITreeNodeInfo } from '../types';
export declare class FetchingHelper {
    static loadAll<TItem, TId, TFilter>({ treeStructure, itemsMap, options, dataSourceState, }: LoadAllOptions<TItem, TId, TFilter>): Promise<{
        itemsMap: import("index").ItemsMap<TId, TItem>;
        treeStructure: TreeStructure<TItem, TId>;
        loadedItems: TItem[];
    }>;
    static load<TItem, TId, TFilter = any>({ tree, options, dataSourceState, patch, }: LoadOptions<TItem, TId, TFilter>): Promise<{
        loadedItems: TItem[];
        byParentId: import("../../helpers/map").CompositeKeysMap<TId, TId[]> | Map<TId, TId[]>;
        nodeInfoById: import("../../helpers/map").CompositeKeysMap<TId, ITreeNodeInfo> | Map<TId, ITreeNodeInfo>;
    }>;
    private static loadMissing;
    private static loadMissingItemsAndParents;
    private static loadItems;
}
//# sourceMappingURL=FetchingHelper.d.ts.map