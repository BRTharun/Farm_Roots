import { DataSourceState, IImmutableMap, IMap, LazyDataSourceApi } from '../../../../../../../types';
import { TreeState } from '../../../treeState';
import { ItemsStatuses } from '../types';
export interface LoadResult<TItem, TId> {
    isUpdated: boolean;
    isOutdated: boolean;
    tree: TreeState<TItem, TId>;
    error?: Error;
}
export interface UseLoadDataProps<TItem, TId, TFilter = any> extends ItemsStatuses<TItem, TId, TFilter> {
    tree: TreeState<TItem, TId>;
    api: LazyDataSourceApi<TItem, TId, TFilter>;
    dataSourceState?: DataSourceState<TFilter, TId>;
    forceReload?: boolean;
    showSelectedOnly?: boolean;
    complexIds?: boolean;
    getId: (item: TItem) => TId;
    isLoaded?: boolean;
    onForceReloadComplete?: () => void;
    patch?: IMap<TId, TItem> | IImmutableMap<TId, TItem>;
}
export declare function useLoadData<TItem, TId, TFilter = any>({ tree, api, dataSourceState, showSelectedOnly, isLoaded: isPrevouslyLoaded, complexIds, getId, onForceReloadComplete, forceReload, patch, itemsStatusCollector: externalItemsStatusCollector, itemsStatusMap, }: UseLoadDataProps<TItem, TId, TFilter>, deps: any[]): {
    tree: TreeState<TItem, TId>;
    isLoading: boolean;
    isFetching: boolean;
    isLoaded: boolean;
    itemsStatusCollector: import("src/data/processing/views/tree/ItemsStatusCollector").ItemsStatusCollector<TItem, TId, any>;
};
//# sourceMappingURL=useLoadData.d.ts.map