import { DataRowProps } from '../../../../../types';
import { CommonTreeConfig } from '../../tree/hooks/strategies/types';
/**
 * Folding service configuration.
 */
export type UseFoldingServiceProps<TItem, TId, TFilter = any> = Pick<CommonTreeConfig<TItem, TId, TFilter>, 'getId' | 'dataSourceState' | 'setDataSourceState' | 'isFoldedByDefault'>;
/**
 * Service, which provides folding functionality and folding info.
 */
export interface FoldingService<TItem, TId> {
    /**
     * Folding event handler.
     * @param row - row, which should be folded.
     */
    handleOnFold: (row: DataRowProps<TItem, TId>) => void;
    /**
     * Provides knowledge about folding state of the row.
     * @param row - row, which folding state info should be returned.
     * @returns if row is folded.
     */
    isFolded: (item: TItem) => boolean;
}
/**
 * Service, which provides folding functionality.
 * @returns folding service.
 */
export declare function useFoldingService<TItem, TId, TFilter = any>({ dataSourceState, setDataSourceState, isFoldedByDefault, getId, }: UseFoldingServiceProps<TItem, TId, TFilter>): FoldingService<TItem, TId>;
//# sourceMappingURL=useFoldingService.d.ts.map