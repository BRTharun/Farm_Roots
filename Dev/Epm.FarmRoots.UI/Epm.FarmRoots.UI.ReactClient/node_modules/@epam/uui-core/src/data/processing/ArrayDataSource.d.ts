import { IDataSourceView, DataSourceState, SetDataSourceState } from '../../types/dataSources';
import { BaseDataSource } from './BaseDataSource';
import { ArrayListViewProps, ITree } from './views';
import { ItemsStorage } from './views/tree/ItemsStorage';
export interface ArrayDataSourceProps<TItem, TId, TFilter> extends ArrayListViewProps<TItem, TId, TFilter> {
}
export declare class ArrayDataSource<TItem = any, TId = any, TFilter = any> extends BaseDataSource<TItem, TId, TFilter> {
    props: ArrayDataSourceProps<TItem, TId, TFilter>;
    tree: ITree<TItem, TId>;
    itemsStorage: ItemsStorage<TItem, TId>;
    constructor(props: ArrayDataSourceProps<TItem, TId, TFilter>);
    setProps(props: ArrayDataSourceProps<TItem, TId, TFilter>): void;
    getById: (id: TId) => TItem | undefined;
    protected defaultGetParentId: (item: TItem) => any;
    setItem(item: TItem): void;
    useView(value: DataSourceState<TFilter, TId>, onValueChange: SetDataSourceState<TFilter, TId>, options?: Partial<ArrayListViewProps<TItem, TId, TFilter>>, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;
}
//# sourceMappingURL=ArrayDataSource.d.ts.map