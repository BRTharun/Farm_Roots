import { IImmutableMap, IMap } from '../../../../../types';
import { ITreeParams } from '../treeStructure/types';
export declare function cloneMap<T extends IMap<any, any> | IImmutableMap<any, any>>(map: T): T extends IMap<infer TKey, infer TValue> ? IMap<TKey, TValue> : T extends IImmutableMap<infer TKey, infer TValue> ? IImmutableMap<TKey, TValue> : never;
export declare function newMap<TKey, TValue>(params: Pick<ITreeParams<any, any>, 'complexIds'>): CompositeKeysMap<TKey, TValue> | Map<TKey, TValue>;
export declare class CompositeKeysMap<TKey, TValue> implements IMap<TKey, TValue> {
    map: Map<string, TValue>;
    constructor(original?: CompositeKeysMap<TKey, TValue>);
    private keyToString;
    get(key: TKey): TValue | undefined;
    set(key: TKey, value: TValue): this;
    delete(key: TKey): boolean;
    [Symbol.iterator](): IterableIterator<[TKey, TValue]>;
    has(key: TKey): boolean;
    get size(): number;
}
//# sourceMappingURL=map.d.ts.map