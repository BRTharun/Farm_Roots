import { BaseListViewProps, DataSourceState, IDataSource, IDataSourceView, SetDataSourceState } from '../../types/dataSources';
import { ITree } from './views';
export declare abstract class BaseDataSource<TItem, TId, TFilter = any> implements IDataSource<TItem, TId, TFilter> {
    props: BaseListViewProps<TItem, TId, TFilter>;
    protected trees: Map<ITree<TItem, TId>, () => void>;
    constructor(props: BaseListViewProps<TItem, TId, TFilter>);
    abstract getById(id: TId): TItem | void;
    abstract setItem(item: TItem): void;
    abstract useView(value: DataSourceState<TFilter, TId>, onValueChange: SetDataSourceState<TFilter, TId>, options?: Partial<BaseListViewProps<TItem, TId, TFilter>>, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;
    abstract setProps(newProps: BaseListViewProps<TItem, TId, TFilter>): void;
    destroy(): void;
    getId: (item: TItem & {
        id?: TId;
    }) => TId;
    protected reload(): void;
}
//# sourceMappingURL=BaseDataSource.d.ts.map