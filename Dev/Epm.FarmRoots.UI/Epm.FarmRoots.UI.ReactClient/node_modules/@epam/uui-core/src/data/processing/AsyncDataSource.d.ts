import { ArrayDataSource, ArrayDataSourceProps } from './ArrayDataSource';
import { DataSourceState, IDataSourceView, SetDataSourceState } from '../../types';
import { AsyncListViewProps } from './views/types';
import { ItemsStatusCollector } from './views/tree/ItemsStatusCollector';
export interface AsyncDataSourceProps<TItem, TId, TFilter> extends AsyncListViewProps<TItem, TId, TFilter> {
}
export declare class AsyncDataSource<TItem = any, TId = any, TFilter = any> extends ArrayDataSource<TItem, TId> {
    api: () => Promise<TItem[]>;
    itemsStatusCollector: ItemsStatusCollector<TItem, TId, TFilter>;
    constructor(props: AsyncDataSourceProps<TItem, TId, TFilter>);
    setProps(newProps: ArrayDataSourceProps<TItem, TId, TFilter>): void;
    reload(): void;
    useView(value: DataSourceState<TFilter, TId>, onValueChange: SetDataSourceState<any, TId>, options?: Partial<AsyncListViewProps<TItem, TId, TFilter>>, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;
}
//# sourceMappingURL=AsyncDataSource.d.ts.map