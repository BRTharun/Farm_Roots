import { IImmutableMap, IMap, Metadata } from '../../types';
import { ValidationState } from './types';
export interface ILensImpl<TBig, TSmall> {
    get(big: TBig | null): TSmall | null;
    set(big: TBig | null, small: TSmall): TBig;
    getValidationState?(big?: ValidationState): ValidationState | undefined;
    getMetadata?(big?: Metadata<TBig>): Metadata<TSmall> | undefined;
}
export declare const identityLens: ILensImpl<any, any>;
export declare function identity<A>(): ILensImpl<A, A>;
export declare function prop<TObject, TKey extends keyof TObject>(name: TKey): ILensImpl<TObject, TObject[TKey]>;
export declare function key<TItem, TId>(id: TId): ILensImpl<IMap<TId, TItem> | IImmutableMap<TId, TItem>, TItem>;
export declare function index<TItem>(num: number): ILensImpl<TItem[], TItem>;
export declare function defaultValue<A>(value: A): ILensImpl<A, A>;
export declare function compose<TBig, TMiddle, TSmall>(left: ILensImpl<TBig, TMiddle>, right: ILensImpl<TMiddle, TSmall>): ILensImpl<TBig, TSmall>;
//# sourceMappingURL=lensesImpl.d.ts.map