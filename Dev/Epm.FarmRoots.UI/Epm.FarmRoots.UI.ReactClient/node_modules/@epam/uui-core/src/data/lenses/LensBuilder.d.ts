import { IEditable } from '../../types';
import { ILensImpl } from './lensesImpl';
import { ILens, ArrayElement, IMapElement } from './types';
export declare class LensBuilder<TRoot = any, TFocused = any> implements ILens<TFocused> {
    readonly lens: ILensImpl<TRoot, TFocused>;
    readonly handleValueChange: (newValue: TFocused) => void;
    constructor(lens: ILensImpl<TRoot, TFocused>);
    get(): TFocused;
    key<TId>(id: TId): LensBuilder<TRoot, IMapElement<TFocused>>;
    set(value: TFocused): void;
    update(fn: (current: TFocused) => TFocused): void;
    static MAX_CACHE_SIZE: number;
    private cache;
    compose<TSmall>(lens: ILensImpl<TFocused, TSmall>, cacheKey?: any): LensBuilder<TRoot, TSmall>;
    prop<K extends keyof TFocused>(name: K): LensBuilder<TRoot, NonNullable<TFocused[K]>>;
    index(index: number): LensBuilder<TRoot, ArrayElement<TFocused>>;
    onChange(fn: (oldValue: TFocused, newValue: TFocused) => TFocused): LensBuilder<TRoot, TFocused>;
    default(value: TFocused): LensBuilder<TRoot, TFocused>;
    toProps(): IEditable<TFocused>;
}
//# sourceMappingURL=LensBuilder.d.ts.map