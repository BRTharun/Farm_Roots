import { IMap, LazyDataSourceApi } from '../../../../types';
import { ItemsMap } from './ItemsMap';
import { FAILED_RECORD, LOADED_RECORD, LOADING_RECORD, NOT_FOUND_RECORD, PENDING_RECORD } from './constants';
import { ITreeParams } from './exposed';
import { RecordStatus } from './types';
interface OnStatusUpdateSubscribe<TId> {
    (itemsStatusMap: IMap<TId, RecordStatus>): void;
}
export declare class ItemsStatusCollector<TItem, TId, TFilter = any> {
    private params;
    private itemsStatusMap;
    private subscriptions;
    constructor(itemsStatusMap: IMap<TId, RecordStatus>, params: ITreeParams<TItem, TId>);
    setPending(ids: TId[]): void;
    setLoading(ids: TId[]): void;
    setLoaded(ids: TId[]): void;
    setFailed(ids: TId[]): void;
    setNotFound(ids: TId[]): void;
    withPending(ids: TId[]): this;
    getItemStatus: (itemsMap: ItemsMap<TId, TItem>) => (id: TId) => typeof NOT_FOUND_RECORD | typeof PENDING_RECORD | typeof LOADING_RECORD | typeof LOADED_RECORD | typeof FAILED_RECORD;
    watch(api: LazyDataSourceApi<TItem, TId, TFilter>): LazyDataSourceApi<TItem, TId, TFilter>;
    private setStatus;
    private onUpdate;
    subscribe(onSubscribe: OnStatusUpdateSubscribe<TId>): (() => void);
}
export {};
//# sourceMappingURL=ItemsStatusCollector.d.ts.map