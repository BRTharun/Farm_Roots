import { IImmutableMap, IMap } from '../../../../types/objects';
export interface ItemsMapParams<TItem, TId> {
    getId: (item: TItem) => TId;
    complexIds?: boolean;
}
export declare class ItemsMap<TId, TItem> implements IImmutableMap<TId, TItem> {
    private _itemsMap;
    private params;
    constructor(itemsMap: IMap<TId, TItem>, params: ItemsMapParams<TItem, TId>);
    constructor(itemsMap: ItemsMap<TId, TItem>);
    get(id: TId): TItem;
    has(id: TId): boolean;
    set(...args: [TId, TItem] | [TId]): ItemsMap<TId, TItem>;
    delete(id: TId): ItemsMap<TId, TItem>;
    forEach(action: (item: TItem, id: TId) => void): void;
    clear(): ItemsMap<TId, TItem>;
    setItems(items: TItem[]): ItemsMap<TId, TItem>;
    get size(): number;
    [Symbol.iterator](): IterableIterator<[TId, TItem]>;
    static fromObject<TId extends symbol | string | number, TItem>(obj: Record<TId, TItem>, params: ItemsMapParams<TItem, TId>): ItemsMap<TId, TItem>;
    static blank<TId, TItem>(params: ItemsMapParams<TItem, TId>): ItemsMap<TId, TItem>;
}
//# sourceMappingURL=ItemsMap.d.ts.map