import { ITree } from '../tree';
import { DataRowPathItem, DataRowProps } from '../../../../types';
import { NodeStats } from './stats';
import { CommonTreeConfig } from '../tree/hooks/strategies/types/common';
export interface UseBuildRowsProps<TItem, TId, TFilter = any> extends Pick<CommonTreeConfig<TItem, TId, TFilter>, 'dataSourceState' | 'rowOptions' | 'getRowOptions' | 'cascadeSelection'> {
    tree: ITree<TItem, TId>;
    getEstimatedChildrenCount: (id: TId) => number;
    getMissingRecordsCount: (id: TId, totalRowsCount: number, loadedChildrenCount: number) => number;
    maxVisibleRowIndex: number;
    getRowProps: (item: TItem, index: number) => DataRowProps<TItem, TId>;
    getLoadingRowProps: (id: any, index?: number, path?: DataRowPathItem<TId, TItem>[]) => DataRowProps<TItem, TId>;
    isLoading?: boolean;
}
export declare function useBuildRows<TItem, TId, TFilter = any>({ tree, dataSourceState, getEstimatedChildrenCount, getMissingRecordsCount, cascadeSelection, maxVisibleRowIndex, getRowProps, getLoadingRowProps, isLoading, }: UseBuildRowsProps<TItem, TId, TFilter>): {
    rows: DataRowProps<TItem, TId>[];
    pinned: Record<string, number>;
    pinnedByParentId: Record<string, number[]>;
    stats: NodeStats;
};
//# sourceMappingURL=useBuildRows.d.ts.map