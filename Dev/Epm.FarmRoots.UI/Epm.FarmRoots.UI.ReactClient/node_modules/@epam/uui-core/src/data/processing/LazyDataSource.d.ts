import { LazyListViewProps } from './views';
import { BaseDataSource } from './BaseDataSource';
import { DataSourceState, IDataSourceView, SetDataSourceState } from '../../types';
import { ItemsStorage } from './views/tree/ItemsStorage';
import { ItemsStatusCollector } from './views/tree/ItemsStatusCollector';
export interface LazyDataSourceProps<TItem, TId, TFilter> extends LazyListViewProps<TItem, TId, TFilter> {
}
export declare class LazyDataSource<TItem = any, TId = any, TFilter = any> extends BaseDataSource<TItem, TId, TFilter> {
    props: LazyDataSourceProps<TItem, TId, TFilter>;
    itemsStorage: ItemsStorage<TItem, TId>;
    itemsStatusCollector: ItemsStatusCollector<TItem, TId, TFilter>;
    constructor(props: LazyDataSourceProps<TItem, TId, TFilter>);
    setProps(props: LazyDataSourceProps<TItem, TId, TFilter>): void;
    getById: (id: TId) => TItem | void;
    setItem(item: TItem): void;
    clearCache(): void;
    useView<TState extends DataSourceState<any, TId>>(value: TState, onValueChange: SetDataSourceState<any, TId>, props?: Partial<LazyListViewProps<TItem, TId, TFilter>>, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;
}
//# sourceMappingURL=LazyDataSource.d.ts.map