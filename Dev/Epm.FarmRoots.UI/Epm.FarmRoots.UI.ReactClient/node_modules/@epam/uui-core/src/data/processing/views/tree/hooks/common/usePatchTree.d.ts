import { DataSourceState, IImmutableMap, IMap, PatchOptions } from '../../../../../../types';
import { TreeState } from '../../treeState';
export interface UsePatchTreeProps<TItem, TId, TFilter = any> extends PatchOptions<TItem, TId> {
    tree: TreeState<TItem, TId>;
    sorting: DataSourceState<TFilter, TId>['sorting'];
}
export declare function usePatchTree<TItem, TId, TFilter = any>({ tree, patch, getNewItemPosition, getItemTemporaryOrder, fixItemBetweenSortings, isDeleted, sorting, sortBy, }: UsePatchTreeProps<TItem, TId, TFilter>): {
    tree: TreeState<TItem, TId>;
    applyPatch: (updated: IMap<TId, TItem> | IImmutableMap<TId, TItem>) => import("src/data/processing/views/tree/treeStructure").TreeStructure<TItem, TId>;
};
//# sourceMappingURL=usePatchTree.d.ts.map