import { DataRowPathItem, DataRowProps } from '../../../../types';
import { CheckingService, FocusService, FoldingService, SelectingService } from './services';
import { CommonTreeConfig } from '../tree/hooks/strategies/types/common';
import { ITree } from '../tree';
export interface UseDataRowPropsProps<TItem, TId, TFilter = any> extends Omit<CheckingService<TItem, TId>, 'clearAllChecked' | 'handleSelectAll'>, FocusService, SelectingService<TItem, TId>, FoldingService<TItem, TId>, Pick<CommonTreeConfig<TItem, TId, TFilter>, 'dataSourceState' | 'rowOptions' | 'getRowOptions' | 'getId'> {
    /**
     * Tree-like data, rows to be built from.
     */
    tree: ITree<TItem, TId>;
    getEstimatedChildrenCount: (id: TId) => number;
}
export declare function useDataRowProps<TItem, TId, TFilter = any>({ tree, getId, dataSourceState, getRowOptions, rowOptions, isFolded, handleOnCheck, handleOnSelect, handleOnFocus, handleOnFold, isRowSelected, isRowChildSelected, isRowChecked, isRowChildrenChecked, getEstimatedChildrenCount, }: UseDataRowPropsProps<TItem, TId, TFilter>): {
    getRowProps: (item: TItem, index: number) => DataRowProps<TItem, TId>;
    getEmptyRowProps: (id: any, index?: number, path?: DataRowPathItem<TId, TItem>[]) => DataRowProps<TItem, TId>;
    getLoadingRowProps: (id: any, index?: number, path?: DataRowPathItem<TId, TItem>[]) => DataRowProps<TItem, TId>;
    getUnknownRowProps: (id: any, index?: number, path?: DataRowPathItem<TId, TItem>[]) => DataRowProps<TItem, TId>;
    updateRowOptions: (row: DataRowProps<TItem, TId>) => DataRowProps<TItem, TId>;
};
//# sourceMappingURL=useDataRowProps.d.ts.map