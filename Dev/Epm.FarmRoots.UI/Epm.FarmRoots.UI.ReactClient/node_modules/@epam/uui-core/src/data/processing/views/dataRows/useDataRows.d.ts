import { DataSourceListProps } from '../../../../types';
import { CommonTreeConfig, ITreeLoadingState } from '../tree/hooks/strategies/types/common';
import { ITree } from '../tree';
import { CascadeSelectionService } from './services/useCascadeSelectionService';
import { GetItemStatus } from '../tree/hooks/strategies/types';
/**
 * `useDataRows` configuration.
 */
export interface UseDataRowsProps<TItem, TId, TFilter = any> extends Omit<CommonTreeConfig<TItem, TId, TFilter>, 'patch'>, ITreeLoadingState, Partial<CascadeSelectionService<TItem, TId>>, GetItemStatus<TId> {
    /**
     * Tree-like data, rows to be built from.
     */
    tree: ITree<TItem, TId>;
}
/**
 * Hook, which builds rows, based on the tree.
 * @returns rows and other IDataSourceView fields.
 */
export declare function useDataRows<TItem, TId, TFilter = any>(props: UseDataRowsProps<TItem, TId, TFilter>): {
    listProps: DataSourceListProps;
    rows: import("src/types/dataRows").DataRowProps<TItem, TId>[];
    getSelectedRowsCount: () => number;
    getById: (id: TId, index: number) => import("src/types/dataRows").DataRowProps<TItem, TId>;
    clearAllChecked: () => void;
    selectAll: {
        value: boolean;
        onValueChange: (isChecked: boolean) => void;
        indeterminate: boolean;
        isDisabled?: undefined;
    } | {
        value: boolean;
        onValueChange: () => void;
        isDisabled: boolean;
        indeterminate: boolean;
    };
};
//# sourceMappingURL=useDataRows.d.ts.map