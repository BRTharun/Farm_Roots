import React from 'react';
import { DataRowProps, PickerFooterProps, DataSourceState } from '@epam/uui-core';
import { PickerTogglerProps } from '../PickerToggler';
import { PickerBodyBaseProps } from '../PickerBodyBase';
import { UsePickerInputProps } from './types';
export declare function usePickerInput<TItem, TId, TProps>(props: UsePickerInputProps<TItem, TId, TProps>): {
    view: import("@epam/uui-core").IDataSourceView<TItem, TId, any>;
    context: import("@epam/uui-core").CommonContexts<any, any>;
    dataSourceState: DataSourceState<Record<string, any>, any>;
    getPlaceholder: () => any;
    getName: (i: void | (TItem & {
        name?: string;
    })) => string;
    getRows: () => {
        cx?: import("@epam/uui-core").ClassValue;
        onClick?: ((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void);
        key?: React.Key;
        children?: React.ReactNode;
        rawProps?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>;
        alignItems?: "top" | "center" | "bottom" | "stretch";
        justifyContent?: "center" | "space-between" | "space-around" | "space-evenly" | "start" | "end";
        columnGap?: number | "6" | "12" | "18" | "24" | "36";
        rowGap?: number | "6" | "12" | "18" | "24" | "36";
        checkbox?: {
            isVisible: boolean;
        } & import("@epam/uui-core").IDisableable & import("@epam/uui-core").ICanBeInvalid;
        isSelectable?: boolean;
        dnd?: import("@epam/uui-core").IDndActor<any, any>;
        link?: import("@epam/uui-core").Link;
        pin?(rowProps: DataRowProps<TItem, TId>): boolean;
        isInvalid?: boolean;
        isDisabled?: boolean;
        isReadonly?: boolean;
        isRequired?: boolean;
        value: TItem;
        onValueChange?: (newValue: TItem) => void;
        validationMessage?: React.ReactNode;
        id: TId;
        rowKey: string;
        index: number;
        parentId?: TId;
        path?: import("@epam/uui-core").DataRowPathItem<TId, TItem>[];
        depth?: number;
        indent?: number;
        isLoading?: boolean;
        isUnknown?: boolean;
        isFoldable?: boolean;
        isFolded?: boolean;
        isChecked?: boolean;
        isCheckable?: boolean;
        isChildrenChecked?: boolean;
        isSelected?: boolean;
        isChildrenSelected?: boolean;
        isFocused?: boolean;
        isLastChild?: boolean;
        onFold?(rowProps: DataRowProps<TItem, TId>): void;
        onCheck?(rowProps: DataRowProps<TItem, TId>): void;
        onSelect?(rowProps: DataRowProps<TItem, TId>): void;
        onFocus?(focusedIndex: number): void;
        isPinned?: boolean;
    }[];
    getTogglerProps: () => PickerTogglerProps<TItem, TId>;
    getFooterProps: () => PickerFooterProps<TItem, TId> & {
        onClose: () => void;
    };
    shouldShowBody: () => boolean;
    toggleBodyOpening: (newOpened: boolean) => void;
    isSingleSelect: () => boolean;
    popperModifiers: (import("react-popper").StrictModifier<any> | Partial<import("@popperjs/core").Modifier<any, object>>)[];
    getPickerBodyProps: (rows: DataRowProps<TItem, TId>[]) => Omit<PickerBodyBaseProps, 'rows'>;
    getListProps: () => import("@epam/uui-core").DataSourceListProps;
    handleTogglerSearchChange: (value: string) => void;
    handleDataSourceValueChange: (newDataSourceState: React.SetStateAction<DataSourceState<any, TId>>) => void;
    handleSelectionValueChange: (newValue: any) => void;
    getSearchPosition: () => import("./types").PickerInputSearchPosition;
    closePickerBody: () => void;
    openPickerBody: () => void;
    handlePickerInputKeyboard: (rows: DataRowProps<TItem, TId>[], e: React.KeyboardEvent<HTMLElement>, actualSearch?: string) => void;
};
//# sourceMappingURL=usePickerInput.d.ts.map