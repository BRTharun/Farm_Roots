import { DataSourceListProps, DataSourceState, PickerBaseProps, PickerFooterProps } from '@epam/uui-core';
import { PickerState } from './types';
export declare function usePicker<TItem, TId, TProps extends PickerBaseProps<TItem, TId>>(props: TProps, pickerState: PickerState): {
    context: import("@epam/uui-core").CommonContexts<any, any>;
    dataSourceState: DataSourceState<Record<string, any>, any>;
    getName: (i: (TItem & {
        name?: string;
    }) | void) => string;
    getPluralName: () => string;
    getEntityName: (countSelected?: number) => string;
    isSingleSelect: () => boolean;
    getSelectedIdsArray: (selected: TId | TId[] | null | undefined) => TId[];
    getSelectedRows: (itemsToTake: number) => import("@epam/uui-core").DataRowProps<TItem, TId>[];
    getDataSourceState: () => DataSourceState<any, any>;
    getRowOptions: () => {
        isSelectable: boolean;
        checkbox?: undefined;
    } | {
        checkbox: {
            isVisible: boolean;
        };
        isSelectable?: undefined;
    };
    clearSelection: () => void;
    hasSelection: () => boolean;
    view: import("@epam/uui-core").IDataSourceView<TItem, TId, any>;
    getListProps: () => DataSourceListProps;
    getFooterProps: () => PickerFooterProps<TItem, TId>;
    handleDataSourceValueChange: (newDataSourceState: React.SetStateAction<DataSourceState<any, TId>>) => void;
    handleSelectionValueChange: (newValue: any) => void;
};
//# sourceMappingURL=usePicker.d.ts.map