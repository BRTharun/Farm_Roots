import * as React from 'react';
interface EventHandlers {
    onDrop: (e: React.DragEvent) => void;
    onDragOver: (e: React.DragEvent) => void;
    onDragEnter: (e: React.DragEvent) => void;
    onDragLeave: (e: React.DragEvent) => void;
}
interface DropSpotProps {
    render(params: DropSpotRenderParams): React.ReactNode;
    onFilesDropped(files: File[]): any;
}
export interface DropSpotRenderParams extends DropSpotState {
    /** Event handlers to put on your rendered component */
    eventHandlers: EventHandlers;
}
interface DropSpotState {
    isDraggingOver: boolean;
    isDragStart: boolean;
}
export declare class DropSpot extends React.Component<DropSpotProps, DropSpotState> {
    entriesCount: number;
    componentDidMount(): void;
    componentWillUnmount(): void;
    onDragOverHandler: (e: DragEvent) => void;
    onDropHandler: () => void;
    onDragStart: (e: DragEvent) => void;
    onDragEnd: (e: DragEvent) => void;
    onDrop: (e: React.DragEvent) => void;
    onDragOver: (e: React.DragEvent) => void;
    onDragEnter: (e: React.DragEvent) => void;
    onDragLeave: (e: React.DragEvent) => void;
    render(): React.ReactNode;
}
export {};
//# sourceMappingURL=DropSpot.d.ts.map