import React, { MouseEvent } from 'react';
import { IAdaptiveItem, ICanRedirect, IHasCaption, IHasChildren, IHasCX, Link, IHasRawProps, IHasForwardedRef, DropdownBodyProps } from '@epam/uui-core';
import { BurgerProps } from './Burger/Burger';
import { AdaptiveItemProps } from '../../layout';
export interface MainMenuDropdownProps extends IHasChildren, IHasCaption, IAdaptiveItem, ICanRedirect, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLElement>> {
    /** Render callback for the MainMenuDropdown body.
     * If omitted, component children will be rendered.
     */
    renderBody?: (props: DropdownBodyProps) => React.ReactNode;
}
export interface MainMenuProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {
    /** Array of menu items to be rendered */
    items?: AdaptiveItemProps[];
    /** @deprecated
     * Use 'items' prop to define menu content */
    children?: any;
    /** Path to the logo source */
    appLogoUrl?: string;
    /** SPA link to navigate on logo click */
    logoLink?: Link;
    /** Href to navigate on logo click */
    logoHref?: string;
    /** Called when logo is clicked */
    onLogoClick?: (e: MouseEvent) => any;
    /** Path to the customer logo source */
    customerLogoUrl?: string;
    /** SPA link to navigate on customer logo click */
    customerLogoLink?: Link;
    /** Href to navigate on customer logo click */
    customerLogoHref?: string;
    customerLogoBgColor?: string;
    isTransparent?: boolean;
    /** Render callback for burger menu content.
     * Burger will appear, which some items don't fit the menu width.
     * */
    renderBurger?: (props: {
        onClose: () => void;
    }) => React.ReactNode;
    /** If true, Burger button will be always visible */
    alwaysShowBurger?: boolean;
    serverBadge?: string;
    /** Internal prop to define component for MainMenuDropdown */
    MainMenuDropdown?: React.ComponentType<MainMenuDropdownProps>;
    /** Internal prop to define component for Burger */
    Burger?: React.ComponentType<BurgerProps>;
}
interface MainMenuState {
    isSidebarOpened?: boolean;
}
export declare const uuiMainMenu: {
    readonly container: "uui-mainmenu-container";
    readonly serverBadge: "uui-mainmenu-server-badge";
    readonly serverBadgeLabel: "uui-mainmenu-server-badge-label";
    readonly transparent: "uui-mainmenu-transparent";
};
export declare class MainMenu extends React.Component<MainMenuProps, MainMenuState> {
    constructor(props: MainMenuProps);
    convertReactChildrenToItems(children: any): AdaptiveItemProps<{
        props?: any;
    }>[];
    renderServerBadge(): JSX.Element;
    getMenuItems(): AdaptiveItemProps[];
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=MainMenu.d.ts.map