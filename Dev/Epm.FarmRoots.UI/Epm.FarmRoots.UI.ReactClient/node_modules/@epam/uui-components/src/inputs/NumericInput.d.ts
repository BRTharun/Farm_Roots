import * as React from 'react';
import { IHasRawProps, IHasCX, IClickable, IDisableable, IEditable, IHasPlaceholder, Icon, CX, ICanBeReadonly, IAnalyticableOnChange, ICanFocus } from '@epam/uui-core';
export interface NumericInputProps extends ICanFocus<HTMLInputElement>, IHasCX, IClickable, IDisableable, IEditable<number | null>, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<number>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {
    /** Maximum value (default is Number.MAX_SAFE_INTEGER) */
    max?: number;
    /**
     * Minimum value (default is 0)
     * @default 0
     */
    min?: number;
    /** Overrides the up/increase icon */
    upIcon?: Icon;
    /** Overrides the down/decrease icon */
    downIcon?: Icon;
    /** Increase/decrease step on up/down icons clicks and up/down arrow keys */
    step?: number;
    /** CSS classes to put directly on the Input element */
    inputCx?: CX;
    /** HTML ID */
    id?: string;
    /** Turn off up/down (increase/decrease) buttons */
    disableArrows?: boolean;
    /** Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column */
    align?: 'left' | 'right';
    /**
     * Turns off locale-based formatting, standard Number.toString() is used instead
     * @default false
     */
    disableLocaleFormatting?: boolean;
    /** Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat} */
    formatOptions?: Intl.NumberFormatOptions;
    /**
     * A function to convert current input value to displayed text.
     * Overrides standard Intl-based formatting.
     * If passed, only maximumFractionDigits considered from formatOptions when both properties provided.
     * Formatting is applied only when input is not focused.
     */
    formatValue?(value: number): string;
}
export declare const uuiNumericInput: {
    readonly upButton: "uui-numeric-input-up-button";
    readonly downButton: "uui-numeric-input-down-button";
    readonly buttonGroup: "uui-numeric-input-button-group";
    readonly withoutArrows: "uui-numeric-input-without-arrows";
};
export declare const NumericInput: React.ForwardRefExoticComponent<NumericInputProps & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=NumericInput.d.ts.map