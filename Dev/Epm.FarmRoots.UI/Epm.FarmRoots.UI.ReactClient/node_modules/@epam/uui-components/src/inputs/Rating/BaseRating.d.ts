import * as React from 'react';
import { IDisableable, IEditable, ICanBeReadonly, IHasCX, IHasRawProps, IHasForwardedRef } from '@epam/uui-core';
export interface BaseRatingProps<TValue> extends IHasCX, IDisableable, IEditable<TValue>, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {
    from?: number;
    to?: number;
    /**
     * @default 1
     */
    step?: 0.5 | 1;
    renderRating?: (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode;
}
interface BaseRatingState {
    rating?: number;
    containerWidth?: number;
}
export declare class BaseRating extends React.Component<BaseRatingProps<number>, BaseRatingState> {
    container: HTMLElement | null;
    constructor(props: BaseRatingProps<number>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: BaseRatingProps<number>): void;
    getContainerWidth(): number;
    getContainerOffsetLeft(): number;
    getNumberOfMarks(): number;
    getMarkWidth(): number;
    checkRating(rating: number): number;
    getRatingFromWidth(width: number): number;
    onMouseMove(e: React.MouseEvent<HTMLDivElement>): void;
    onMouseLeave(): void;
    onMouseUp(e: React.MouseEvent<HTMLDivElement>): void;
    onTouchEnd(e: React.TouchEvent<HTMLDivElement>): void;
    onKeyDown(e: React.KeyboardEvent<HTMLDivElement>): void;
    handleRef: (container: HTMLDivElement) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=BaseRating.d.ts.map