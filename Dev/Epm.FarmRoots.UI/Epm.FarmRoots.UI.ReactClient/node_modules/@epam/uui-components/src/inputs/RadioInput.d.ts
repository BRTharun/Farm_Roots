import * as React from 'react';
import { IHasRawProps, IHasCX, IDisableable, IEditable, IHasLabel, Icon, ICanBeReadonly, IAnalyticableOnChange, ICanFocus, IHasTabIndex } from '@epam/uui-core';
export type RadioInputProps = IHasCX & IDisableable & IEditable<boolean> & IHasLabel & ICanBeReadonly & IAnalyticableOnChange<boolean> & IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>> & ICanFocus<HTMLInputElement> & IHasTabIndex & {
    /** Icon for radio input selected state.
     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon
     */
    icon?: Icon;
    /** Render callback for checkbox label.
     * If omitted, 'label' prop value will be rendered.
     */
    renderLabel?(): React.ReactNode;
    /** ID to put on 'input' node */
    id?: string;
    /** Defines native HTML name attribute for the input */
    name?: string;
};
export declare const RadioInput: React.ForwardRefExoticComponent<IHasCX & IDisableable & IEditable<boolean> & IHasLabel & ICanBeReadonly & IAnalyticableOnChange<boolean> & IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>> & ICanFocus<HTMLInputElement> & IHasTabIndex & {
    /** Icon for radio input selected state.
     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon
     */
    icon?: Icon;
    /** Render callback for checkbox label.
     * If omitted, 'label' prop value will be rendered.
     */
    renderLabel?(): React.ReactNode;
    /** ID to put on 'input' node */
    id?: string;
    /** Defines native HTML name attribute for the input */
    name?: string;
} & React.RefAttributes<HTMLLabelElement>>;
//# sourceMappingURL=RadioInput.d.ts.map