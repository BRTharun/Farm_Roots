import * as React from 'react';
import { IHasCX, IEditable, IDisableable, IHasRawProps, IHasForwardedRef } from '@epam/uui-core';
export interface SliderBaseProps<TSelection> extends IHasCX, IEditable<TSelection>, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {
    /** Min value (when slider is at leftmost position) */
    min: number;
    /** Max value (when slider is at rightmost position) */
    max: number;
    /** Value change step */
    step: number;
    /** Slider renders a label at each splitAt position */
    splitAt?: number;
    /** Overrides rendering of values labels */
    renderLabel?: (value: number) => string;
    /** Toggles rendering of tooltip with current value */
    showTooltip?: boolean;
}
export interface SliderBaseState {
    isActive: boolean;
    valueWidth: number;
}
export declare const uuiSlider: {
    readonly container: "uui-slider-container";
    readonly slider: "uui-slider";
    readonly filled: "uui-slider-filled";
    readonly handle: "uui-slider-handle";
    readonly scale: "uui-slider-scale";
    readonly scaleNumber: "uui-slider-scale-number";
    readonly scaleDot: "uui-slider-scale-dot";
    readonly scaleFilledDot: "uui-slider-scale-filled-dot";
};
export declare abstract class SliderBase<TSelection, TState extends SliderBaseState> extends React.Component<SliderBaseProps<TSelection>, TState> {
    slider: HTMLElement | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getFloatPrecision: (step: number) => number;
    roundToStep(value: number, step: number): number;
    handleResize: () => void;
    handleMouseDown: () => void;
    handleMouseUp: () => void;
    getValue: (mouseX: number, valueWidth?: number) => number;
}
//# sourceMappingURL=SliderBase.d.ts.map