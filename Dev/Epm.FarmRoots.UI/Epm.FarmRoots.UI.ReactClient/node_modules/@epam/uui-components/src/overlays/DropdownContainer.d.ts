import * as React from 'react';
import { IHasCX, IHasChildren, IHasRawProps, IHasForwardedRef, IDropdownBodyProps, IHasStyleAttrs } from '@epam/uui-core';
import { ReactFocusLockProps } from 'react-focus-lock/interfaces';
export interface DropdownContainerProps extends IHasCX, IHasChildren, IHasStyleAttrs, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, IDropdownBodyProps, Pick<ReactFocusLockProps, 'autoFocus' | 'as' | 'shards'> {
    /** Defines width in 'px' or 'auto'. If 'auto' provided, will be used width of the content. */
    width?: number | 'auto';
    /** Defines maximum width in 'px'. If 'auto' provided, will be used width of the content. */
    maxWidth?: number | 'auto';
    /** Defines height in 'px'. */
    height?: number;
    /** Defines maxHeight in 'px'. If 'auto' provided, will be used height of the content. */
    maxHeight?: number | 'auto';
    /** If true, arrow tip will be shown
     * @default false
     * */
    showArrow?: boolean;
    /**
     * Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.
     * If omitted, true value will be used.
     *
     * After DropdownContainer appeared the focus will be set on the first focusable element inside.
     * @default true
     */
    focusLock?: boolean;
    /**
     * Pass true to return focus into initial position on unmount.
     * If omitted, true value will be used. It's used if focusLock=true.
     * */
    returnFocus?: boolean;
    /**
     * Pass true to lock focus within DropdownContainer.
     * If omitted, true value will be used. It's used if focusLock=true.
     */
    persistentFocus?: boolean;
    /**
     * Pass any extra props to the FocusLock wrapper.
     */
    lockProps?: Record<string, any>;
    /**
     * Pass true to handle Escape key press and call props.onClose().
     * If omitted, true value will be used. It's used if focusLock=true.
     */
    closeOnEsc?: boolean;
    /** Called on keyDown event in DropdownContainer.
     Can be used to provide your own handlers.
     */
    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;
}
export declare const DropdownContainer: React.ForwardRefExoticComponent<DropdownContainerProps & React.RefAttributes<HTMLElement>>;
//# sourceMappingURL=DropdownContainer.d.ts.map